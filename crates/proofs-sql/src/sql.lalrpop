use crate::intermediate_ast;
use crate::select_statement;
use crate::identifier;
use lalrpop_util::ParseError::User;

grammar;

////////////////////////////////////////////////////////////////////////////////////////////////
// We only need to support SELECT statements on this SQL parser.
//
// Besides, the grammar here is strictly following Postgres grammar rules defined here: 
// https://www.postgresql.org/docs/current/sql-syntax-lexical.html
////////////////////////////////////////////////////////////////////////////////////////////////

pub SelectStatement: select_statement::SelectStatement = {
    <expr: SelectCore> <order_by: ("order" "by" <OrderByList>)?> <slice: SliceClause?> => 
        select_statement::SelectStatement {
            expr,
            order_by: order_by.unwrap_or(vec![]),
            slice,
        },
};

SelectCore: Box<intermediate_ast::SetExpression> = {
    "select" <columns: ResultColumnList> <from: FromClause> <where_expr: WhereClause?> <group_by: GroupByClause?> =>
        Box::new(intermediate_ast::SetExpression::Query { columns, from, where_expr, group_by: group_by.unwrap_or(vec![]) }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Order By
////////////////////////////////////////////////////////////////////////////////////////////////

OrderByList: Vec<intermediate_ast::OrderBy> = {
    <order_by: OrderByCore> => vec![<>],

    <order_by_list: OrderByList> "," <order_by: OrderByCore> => intermediate_ast::append(order_by_list, order_by),    
};

OrderByCore: intermediate_ast::OrderBy = {
    <col_id: Identifier> "asc"? => intermediate_ast::OrderBy {
            expr: col_id, direction: intermediate_ast::OrderByDirection::Asc,
    },

    <col_id: Identifier> "desc" => intermediate_ast::OrderBy {
            expr: col_id, direction: intermediate_ast::OrderByDirection::Desc,
    },
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Limit Clause
////////////////////////////////////////////////////////////////////////////////////////////////

SliceClause: intermediate_ast::Slice = {
    <limit: LimitClause> => intermediate_ast::Slice {
        number_rows: limit,
        offset_value: 0,
    },
    <offset: OffsetClause> => intermediate_ast::Slice {
        number_rows: u64::MAX,
        offset_value: offset,
    },
    <offset: OffsetClause> <number_rows: LimitClause> => intermediate_ast::Slice {
        number_rows: number_rows,
        offset_value: offset,
    },
    <number_rows: LimitClause> <offset: OffsetClause> => intermediate_ast::Slice {
        number_rows: number_rows,
        offset_value: offset,
    },
};

LimitClause: u64 = {
    "limit" "all" => u64::MAX,
    "limit" <number_rows: UnsignedNumericLiteral> => number_rows,
};

OffsetClause: i64 = {
    "offset" <offset: SignedNumericLiteral> => offset,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Group By
////////////////////////////////////////////////////////////////////////////////////////////////
GroupByClause: Vec<identifier::Identifier> = {
    "group" "by" <group_by_list: GroupByList> => group_by_list, 
};

GroupByList: Vec<identifier::Identifier> = {
    <group_by: GroupByCore> => vec![<>],

    <group_by_list: GroupByList> "," <group_by: GroupByCore> => intermediate_ast::append(group_by_list, group_by),    
};

GroupByCore: identifier::Identifier = {
    <col_id: Identifier> => col_id,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Result Columns
////////////////////////////////////////////////////////////////////////////////////////////////

ResultColumnList: Vec<intermediate_ast::ResultColumnExpr> = {
    ResultColumnExpr => vec![<>],

    <columns: ResultColumnList> "," <column: ResultColumnExpr> => intermediate_ast::append(columns, column),
};

ResultColumnExpr: intermediate_ast::ResultColumnExpr = {
    "*" => intermediate_ast::ResultColumnExpr::AllColumns,

    <name: QualifiedColumnIdentifier> <alias: ("as"? <Identifier>)?>  =>
            intermediate_ast::ResultColumnExpr::SimpleColumn(
                intermediate_ast::ResultColumn { name, alias: alias.unwrap_or(name) }),

    <agg_expr: AggExpr> => intermediate_ast::ResultColumnExpr::AggColumn(agg_expr),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Aggregation Expressions
////////////////////////////////////////////////////////////////////////////////////////////////
AggExpr: intermediate_ast::AggExpr = {
    // TODO: for now, we use alias `__max__` instead of `max` because `max` is a reserved word.
    "max" "(" <name: QualifiedColumnIdentifier> ")" <alias: ("as"? <Identifier>)?>  => 
        intermediate_ast::AggExpr::Max(intermediate_ast::ResultColumn { name, alias: alias.unwrap_or(identifier::Identifier::new("__max__")) }),

    // TODO: for now, we use alias `__min__` instead of `min` because `min` is a reserved word.
    "min" "(" <name: QualifiedColumnIdentifier> ")" <alias: ("as"? <Identifier>)?>  => 
        intermediate_ast::AggExpr::Min(
            intermediate_ast::ResultColumn { name, alias: alias.unwrap_or(identifier::Identifier::new("__min__")) }
        ),

    // TODO: for now, we use alias `__count__` instead of `count` because `count` is a reserved word.
    "count" "(" "*" ")" <alias: ("as"? <Identifier>)?>  =>
        intermediate_ast::AggExpr::CountAll(alias.unwrap_or(identifier::Identifier::new("__count__"))),

    // TODO: for now, we use alias `__count__` instead of `count` because `count` is a reserved word.
    "count" "(" <name: QualifiedColumnIdentifier> ")" <alias: ("as"? <Identifier>)?>  => 
        intermediate_ast::AggExpr::Count(
            intermediate_ast::ResultColumn { name, alias: alias.unwrap_or(identifier::Identifier::new("__count__")) }
        ),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// QualifiedColumnIdentifier (used by result column and where_expr columns)
////////////////////////////////////////////////////////////////////////////////////////////////

// Note: we are adding a new `QualifiedColumnIdentifierParen` rule
// solely for the purpose of overcoming LALRPOP restrictions.
// For instance, see this thread:
// [here](https://gitter.im/lalrpop/Lobby?at=6368164d9ee3ec22b4fa69cb)
QualifiedColumnIdentifierParen: identifier::Identifier = "(" <QualifiedColumnIdentifier> ")";
QualifiedColumnIdentifier: identifier::Identifier = {
    #[precedence(level="0")]
    QualifiedColumnIdentifierParen,

    #[precedence(level="1")]
    Identifier,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// FromClause
////////////////////////////////////////////////////////////////////////////////////////////////

FromClause: Vec<Box<intermediate_ast::TableExpression>> = {
    "from" <table_ref: TableExpression> => vec![table_ref],
};

TableExpression: Box<intermediate_ast::TableExpression> = {
    <table: QualifiedTableIdentifier> => table,
};

QualifiedTableIdentifierParen: Box<intermediate_ast::TableExpression> = "(" <QualifiedTableIdentifier> ")";
QualifiedTableIdentifier: Box<intermediate_ast::TableExpression> = {
    #[precedence(level="0")]
    QualifiedTableIdentifierParen,

    #[precedence(level="1")]
    <schema: (<Identifier> ".")?> <table: Identifier> =>
        Box::new(intermediate_ast::TableExpression::Named { table, schema }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// WhereClause
////////////////////////////////////////////////////////////////////////////////////////////////

WhereClause: Box<intermediate_ast::Expression> = {
    "where" <expr: Expression> => expr,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////////////////////
ExprParen: Box<intermediate_ast::Expression> = "(" <Expression> ")";
Expression: Box<intermediate_ast::Expression> = {
    #[precedence(level="0")]
    ExprParen,

    #[precedence(level="1")]
    ComparativeExpression,

    #[precedence(level="2")] #[assoc(side="right")]
    "not" <expr: Expression> => Box::new(intermediate_ast::Expression::Not { expr }),

    #[precedence(level="3")] #[assoc(side="left")]
    <left: Expression> "and" <right: Expression> =>
        Box::new(intermediate_ast::Expression::And { left, right }),

    #[precedence(level="4")] #[assoc(side="left")]
    <left: Expression> "or" <right: Expression> =>
        Box::new(intermediate_ast::Expression::Or { left, right }),
};

ComparativeExpression: Box<intermediate_ast::Expression> = {
    <left: QualifiedColumnIdentifier> "=" <right: LiteralValue> =>
        Box::new(intermediate_ast::Expression::Equal { left, right }),

    <left: LiteralValue> "=" <right: QualifiedColumnIdentifier> =>
        Box::new(intermediate_ast::Expression::Equal { left: right, right: left }),

    <left: QualifiedColumnIdentifier> "!=" <right: LiteralValue> =>
        Box::new(intermediate_ast::Expression::Not {
            expr: Box::new(intermediate_ast::Expression::Equal { left, right })
        }),

    <left: LiteralValue> "!=" <right: QualifiedColumnIdentifier> =>
        Box::new(intermediate_ast::Expression::Not {
            expr: Box::new(intermediate_ast::Expression::Equal { left: right, right: left })
        }),
};

UnaryNumericLiteralParen: i64 = "(" <UnaryNumericLiteral> ")";
UnaryNumericLiteral: i64 = {
    #[precedence(level="0")]
    UnaryNumericLiteralParen,

    #[precedence(level="1")]
    SignedNumericLiteral,

    #[precedence(level="2")] #[assoc(side="right")]
    "+" <expr: UnaryNumericLiteral> => expr,
    "-" <expr: UnaryNumericLiteral> =>? expr.checked_neg().ok_or(User {error: "Integer overflow"}),
};

StringLiteralParen: String = "(" <StringLiteral> ")";
pub StringLiteral: String = {
    #[precedence(level="0")]
    StringLiteralParen,

    STRING_LITERAL => <>[1..<>.len() - 1].replace("''", "'"),
};

LiteralValue: Box<intermediate_ast::Literal> = {
    <value: StringLiteral> => Box::new(intermediate_ast::Literal::VarChar(<>)),

    <value: UnaryNumericLiteral> => Box::new(intermediate_ast::Literal::BigInt(<>)),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Tokens
////////////////////////////////////////////////////////////////////////////////////////////////

pub(crate) ResourceId: (identifier::Identifier, identifier::Identifier) = {
    <schema: Identifier> "." <object_name: Identifier> => (schema, object_name)
};

pub(crate) Identifier: identifier::Identifier = ID =>? if <>.len() <= 64 {
    Ok(identifier::Identifier::new(<>))
} else {
    Err(User {error: "Identifier is too long, must be 64 bytes or less (note this may be <64 characters in UTF8)"})
};

SignedNumericLiteral: i64 = {
    NUMERIC_LIT =>? <>.parse::<i64>().map_err(|_| User {error: "Integer out of range"}),
};

UnsignedNumericLiteral: u64 = {
    NUMERIC_LIT =>? <>.parse::<u64>().map_err(|_| User {error: "Integer out of range"}),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Lexer specification, with the primary purpose of making language keywords case insensitive //
////////////////////////////////////////////////////////////////////////////////////////////////

match {
    r"[aA][lL][lL]" => "all",
    r"[aA][sS][cC]" => "asc",
    r"[dD][eE][sS][cC]" => "desc",
    r"[aA][sS]" => "as",
    r"[aA][nN][dD]" => "and",
    r"[fF][rR][oO][mM]" => "from",
    r"[nN][oO][tT]" => "not",
    r"[oO][rR]" => "or",
    r"[sS][eE][lL][eE][cC][tT]" => "select",
    r"[wW][hH][eE][rR][eE]" => "where",
    r"[oO][rR][dD][eE][rR]" => "order",
    r"[bB][yY]" => "by",
    r"[lL][iI][mM][iI][tT]" => "limit",
    r"[oO][fF][fF][sS][eE][tT]" => "offset",
    r"[gG][rR][oO][uU][pP]" => "group",
    r"[mM][iI][nN]" => "min",
    r"[mM][aA][xX]" => "max",
    r"[cC][oO][uU][nN][tT]" => "count",

    "," => ",",
    "." => ".",
    "(" => "(",
    ")" => ")",
    "+" => "+",
    "-" => "-",
    "*" => "*",
    "=" => "=",
    r"(!=|<>)" => "!=",
} else {
    r"[A-Za-z_][A-Za-z0-9_]*" => ID,
    r"[+-]?[0-9]+([0-9]*)" => NUMERIC_LIT,
    r"'(?s)(?:''|[^'])*'" => STRING_LITERAL,
}
