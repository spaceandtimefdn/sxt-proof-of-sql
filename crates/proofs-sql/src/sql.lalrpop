use crate::intermediate_ast;
use crate::symbols;
use lalrpop_util::ParseError::User;

grammar;

////////////////////////////////////////////////////////////////////////////////////////////////
// Everything we allow in the PoSQL engine have to be SELECT
////////////////////////////////////////////////////////////////////////////////////////////////

pub SelectStatement: intermediate_ast::SelectStatement = {
    <expr: SelectCoreList> => 
        intermediate_ast::SelectStatement {
            expr,
        },
};

SelectCoreList: Box<intermediate_ast::SetExpression> = {
    SelectCore,
};

SelectCore: Box<intermediate_ast::SetExpression> = {
    "select" <columns:ResultColumnList> <from:FromClause> <where_expr:WhereClause> =>
        Box::new(intermediate_ast::SetExpression::Query{ columns, from, where_expr }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Result Columns
////////////////////////////////////////////////////////////////////////////////////////////////

ResultColumnList: Vec<Box<intermediate_ast::ResultColumn>> = {
    ResultColumn => vec![<>],

    <columns:ResultColumnList> "," <column:ResultColumn> => intermediate_ast::append(columns, column),
};

ResultColumn: Box<intermediate_ast::ResultColumn> = {
    <expr: QualifiedColumnIdentifier> => Box::new(intermediate_ast::ResultColumn::Expr { expr, output_name: None }),
    <expr: QualifiedColumnIdentifier> "as"? <output_name: Identifier>  =>
            Box::new(intermediate_ast::ResultColumn::Expr { expr, output_name: Some(output_name) }),
};

QualifiedColumnIdentifier: symbols::Name = {
    Identifier,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// FromClause
////////////////////////////////////////////////////////////////////////////////////////////////

FromClause: Vec<Box<intermediate_ast::TableExpression>> = {
    "from" <table_ref: TableExpressionList> => table_ref,
};

TableExpressionList: Vec<Box<intermediate_ast::TableExpression>> = {
    TableExpression => vec![<>],
};

TableExpression: Box<intermediate_ast::TableExpression> = {
    <table: QualifiedTableIdentifier> => table,

    "(" <table_ref: TableExpression> ")" => table_ref,
};

QualifiedTableIdentifier: Box<intermediate_ast::TableExpression> = {
    <table: Identifier> =>
        Box::new(intermediate_ast::TableExpression::Named { table, namespace: None }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// WhereClause
////////////////////////////////////////////////////////////////////////////////////////////////

WhereClause: Box<intermediate_ast::Expression> = {
    "where" <expr:Expression> => expr,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////////////////////

Expression: Box<intermediate_ast::Expression> = {
    NotExpression,
    OrExpression,
    AndExpression,
    EqualityExpression,
};

AndExpression: Box<intermediate_ast::Expression> = {
    "(" <left:Expression> ")" "and" "(" <right:Expression> ")" =>
        Box::new(intermediate_ast::Expression::And { left, right }),
};

OrExpression: Box<intermediate_ast::Expression> = {
    "(" <left:Expression> ")" "or" "(" <right:Expression> ")" =>
        Box::new(intermediate_ast::Expression::Or { left, right }),
};

NotExpression: Box<intermediate_ast::Expression> = {
    "not" "(" <expr:Expression> ")" => Box::new(intermediate_ast::Expression::Not { expr }),
};

EqualityExpression: Box<intermediate_ast::Expression> = {
    <left:QualifiedColumnIdentifier> "=" <right: UnaryExpression> =>
        Box::new(intermediate_ast::Expression::Equal { left, right }),
};

UnaryExpression: i64 = {
    NumericLiteral,

    "+" <expr: UnaryExpression> => expr,

    "-" <expr: UnaryExpression> => -1 * expr,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Tokens
////////////////////////////////////////////////////////////////////////////////////////////////

Identifier: symbols::Name = ID => symbols::Name::from(<>);

NumericLiteral: i64 = {
    NUMERIC_LIT =>? <>.parse::<i64>().map_err(|_| User {error: "Integer out of range"}),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Lexer specification, with the primary purpose of making language keywords case insensitive //
////////////////////////////////////////////////////////////////////////////////////////////////

match {
    r"(?i)as" => "as",

    r"(?i)and" => "and",
    
    r"(?i)from" => "from",

    r"(?i)not" => "not",

    r"(?i)or" => "or",

    r"(?i)select" => "select",

    r"(?i)where" => "where",

    "," => ",",
    "." => ".",
    "(" => "(",
    ")" => ")",
    "+" => "+",
    "-" => "-",
    "*" => "*",
    "/" => "/",
    "=" => "=",
    "==" => "==",
    "!=" => "!=",
    "<>" => "<>",
} else {
    r"[A-Za-z_][A-Za-z0-9_]*" => ID,
    r"[+-]?[0-9]+([0-9]*)" => NUMERIC_LIT,
}
