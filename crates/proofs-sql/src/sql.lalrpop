use crate::intermediate_ast;
use crate::symbols;
use lalrpop_util::ParseError::User;

grammar;

////////////////////////////////////////////////////////////////////////////////////////////////
// We only need to support SELECT statements on this SQL parser.
//
// Besides, the grammar here is strictly following Postgres grammar rules defined here: 
// https://www.postgresql.org/docs/current/sql-syntax-lexical.html
////////////////////////////////////////////////////////////////////////////////////////////////

pub SelectStatement: intermediate_ast::SelectStatement = {
    <expr: SelectCoreList> => 
        intermediate_ast::SelectStatement {
            expr,
        },
};

SelectCoreList: Box<intermediate_ast::SetExpression> = {
    SelectCore,
};

SelectCore: Box<intermediate_ast::SetExpression> = {
    "select" <columns: ResultColumnList> <from: FromClause> <where_expr: WhereClause> =>
        Box::new(intermediate_ast::SetExpression::Query{ columns, from, where_expr }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Result Columns
////////////////////////////////////////////////////////////////////////////////////////////////

ResultColumnList: Vec<Box<intermediate_ast::ResultColumn>> = {
    ResultColumn => vec![<>],

    <columns: ResultColumnList> "," <column: ResultColumn> => intermediate_ast::append(columns, column),
};

ResultColumn: Box<intermediate_ast::ResultColumn> = {
    "*" => Box::new(intermediate_ast::ResultColumn::All),

    <expr: QualifiedColumnIdentifier> => Box::new(intermediate_ast::ResultColumn::Expr { expr, output_name: None }),

    <expr: QualifiedColumnIdentifier> "as"? <output_name: Identifier>  =>
            Box::new(intermediate_ast::ResultColumn::Expr { expr, output_name: Some(output_name) }),
};

// Note: we are adding a new `QualifiedColumnIdentifierParen` rule
// solely for the purpose of overcoming LALRPOP restrictions.
// For instance, see this thread:
// [here](https://gitter.im/lalrpop/Lobby?at=6368164d9ee3ec22b4fa69cb)
QualifiedColumnIdentifierParen: symbols::Name = "(" <QualifiedColumnIdentifier> ")";
QualifiedColumnIdentifier: symbols::Name = {
    #[precedence(level="0")]
    QualifiedColumnIdentifierParen,

    #[precedence(level="1")]
    Identifier,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// FromClause
////////////////////////////////////////////////////////////////////////////////////////////////

FromClause: Vec<Box<intermediate_ast::TableExpression>> = {
    "from" <table_ref: TableExpression> => vec![table_ref],
};

TableExpression: Box<intermediate_ast::TableExpression> = {
    <table: QualifiedTableIdentifier> => table,
};

QualifiedTableIdentifierParen: Box<intermediate_ast::TableExpression> = "(" <QualifiedTableIdentifier> ")";
QualifiedTableIdentifier: Box<intermediate_ast::TableExpression> = {
    #[precedence(level="0")]
    QualifiedTableIdentifierParen,

    #[precedence(level="1")]
    <schema: (<Identifier> ".")?> <table: Identifier> =>
        Box::new(intermediate_ast::TableExpression::Named { table, schema }),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// WhereClause
////////////////////////////////////////////////////////////////////////////////////////////////

WhereClause: Box<intermediate_ast::Expression> = {
    "where" <expr: Expression> => expr,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////////////////////
ExprParen: Box<intermediate_ast::Expression> = "(" <Expression> ")";
Expression: Box<intermediate_ast::Expression> = {
    #[precedence(level="0")]
    ExprParen,

    #[precedence(level="1")]
    ComparativeExpression,

    #[precedence(level="2")] #[assoc(side="right")]
    "not" <expr: Expression> => Box::new(intermediate_ast::Expression::Not { expr }),

    #[precedence(level="3")] #[assoc(side="left")]
    <left: Expression> "and" <right: Expression> =>
        Box::new(intermediate_ast::Expression::And { left, right }),

    #[precedence(level="4")] #[assoc(side="left")]
    <left: Expression> "or" <right: Expression> =>
        Box::new(intermediate_ast::Expression::Or { left, right }),
};

ComparativeExpression: Box<intermediate_ast::Expression> = {
    <left: QualifiedColumnIdentifier> "=" <right: UnaryLiteral> =>
        Box::new(intermediate_ast::Expression::Equal { left, right }),

    <left: QualifiedColumnIdentifier> "!=" <right: UnaryLiteral> =>
        Box::new(intermediate_ast::Expression::NotEqual { left, right }),

    <left: QualifiedColumnIdentifier> "<>" <right: UnaryLiteral> =>
        Box::new(intermediate_ast::Expression::NotEqual { left, right }),    
};

UnaryParen: i64 = "(" <UnaryLiteral> ")";
UnaryLiteral: i64 = {
    #[precedence(level="0")]
    UnaryParen,

    #[precedence(level="1")]
    NumericLiteral,

    #[precedence(level="2")] #[assoc(side="right")]
    "+" <expr: UnaryLiteral> => expr,
    "-" <expr: UnaryLiteral> => -1 * expr,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Tokens
////////////////////////////////////////////////////////////////////////////////////////////////

Identifier: symbols::Name = ID => symbols::Name::from(<>);

NumericLiteral: i64 = {
    NUMERIC_LIT =>? <>.parse::<i64>().map_err(|_| User {error: "Integer out of range"}),
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Lexer specification, with the primary purpose of making language keywords case insensitive //
////////////////////////////////////////////////////////////////////////////////////////////////

match {
    r"(?i)as" => "as",

    r"(?i)and" => "and",
    
    r"(?i)from" => "from",

    r"(?i)not" => "not",

    r"(?i)or" => "or",

    r"(?i)select" => "select",

    r"(?i)where" => "where",

    "," => ",",
    "." => ".",
    "(" => "(",
    ")" => ")",
    "+" => "+",
    "-" => "-",
    "*" => "*",
    "/" => "/",
    "=" => "=",
    "==" => "==",
    "!=" => "!=",
    "<>" => "<>",
} else {
    r"[A-Za-z_][A-Za-z0-9_]*" => ID,
    r"[+-]?[0-9]+([0-9]*)" => NUMERIC_LIT,
}
