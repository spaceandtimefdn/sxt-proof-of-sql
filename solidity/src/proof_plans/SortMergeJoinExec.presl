// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import "../base/Constants.sol";
import "../base/Errors.sol";
import {VerificationBuilder} from "../builder/VerificationBuilder.presl";

/// @title EmptyExec
/// @dev Library for handling sort merge join execution plans
library SortMergeJoinExec {
    /// @notice Evaluates a sort merge join plan
    /// @custom:as-yul-wrapper
    /// #### Wrapped Yul Function
    /// ##### Signature
    /// ```yul
    /// sort_merge_join_evaluate(plan_ptr, builder_ptr) -> plan_ptr_out, evaluations_ptr, output_length, output_chi_eval
    /// ```
    /// ##### Parameters
    /// * `plan_ptr` - calldata pointer to the sort merge join execution plan data
    /// * `builder_ptr` - memory pointer to the verification builder
    /// ##### Return Values
    /// * `plan_ptr_out` - pointer to the remaining plan after consuming the sort merge join execution plan data
    /// * `evaluations_ptr` - pointer to the evaluations
    /// * `output_length` - the length of the column of ones
    /// * `output_chi_eval` - pointer to the evaluation of a column of 1s with same length as output
    /// @notice Evaluates a sort merge join execution plan
    /// @dev Evaluates a sort merge join execution plan
    /// @param __plan The sort merge join execution plan data
    /// @param __builder The verification builder
    /// @return __planOut The remaining plan after processing
    /// @return __builderOut The verification builder result
    /// @return __evaluationsPtr The evaluations pointer
    /// @return __outputLength The length of the output chi evaluation
    /// @return __outputChiEvaluation The output chi evaluation
    function __sortMergeJoinEvaluate( // solhint-disable-line gas-calldata-parameters
    bytes calldata __plan, VerificationBuilder.Builder memory __builder)
        external
        pure
        returns (
            bytes calldata __planOut,
            VerificationBuilder.Builder memory __builderOut,
            uint256[] memory __evaluationsPtr,
            uint256 __outputLength,
            uint256 __outputChiEvaluation
        )
    {
        uint256[] memory __evaluations;
        assembly {
            // import proof_plan_evaluate from ProofPlan.presl
            // import err from ../base/Errors.sol
            // import addmod_bn254, mulmod_bn254, submod_bn254 from ../base/MathUtil.presl
            // import read_binary from ../base/DataType.presl
            // import builder_consume_challenge, builder_consume_chi_evaluation_with_length, builder_consume_first_round_mle, builder_get_table_chi_evaluation, builder_produce_zerosum_constraint from ../builder/VerificationBuilder.presl
            // import proof_expr_evaluate from ../proof_exprs/ProofExpr.presl
            // import fold_expr_evals from ../proof_gadgets/FoldUtil.presl
            // import fold_log_star_evaluate_from_column_exprs, fold_log_star_evaluate_from_mles from ../proof_gadgets/FoldLogExpr.presl
            // import monotonic_verify from ../proof_gadgets/Monotonic.presl
            // import membership_check_evaluate from ../proof_gadgets/MembershipCheck.presl
            function evaluate_input_plans(plan_ptr, builder_ptr, evaluations) -> plan_ptr_out, hat_evals, join_evals {
                // Determine total number of evaluations
                let num_columns := mload(evaluations)
                evaluations := add(evaluations, WORD_SIZE)

                // Determine number of columns to join on
                let num_join_columns := shr(UINT64_PADDING_BITS, calldataload(plan_ptr))
                plan_ptr := add(plan_ptr, UINT64_SIZE)
                if sub(num_join_columns, 1) { err(ERR_NUMBER_OF_JOIN_COLUMNS_NOT_ONE) }

                // We need a collection to record which indices are not join indices.
                // The total number of evaluations from the input should be the number of entries in this collection.
                let other_indices := mload(FREE_PTR)
                hat_evals := add(other_indices, mul(num_columns, WORD_SIZE))

                // There should be an extra entry in the hat collection for rho
                mstore(hat_evals, add(num_columns, 1))
                let target_hat_evals := add(hat_evals, WORD_SIZE)
                join_evals := add(target_hat_evals, mul(add(num_columns, 1), WORD_SIZE))

                // The join evals should have the same number as the length of the join index collection
                mstore(join_evals, num_join_columns)
                let target_join_evals := add(join_evals, WORD_SIZE)
                mstore(FREE_PTR, add(target_join_evals, mul(num_join_columns, WORD_SIZE)))

                // Populate the non join index collection with 1s.
                for { let i := num_columns } i {} {
                    i := sub(i, 1)
                    mstore(add(other_indices, mul(i, WORD_SIZE)), 1)
                }

                // We need to update each of our collections for each join column
                for { let i := num_join_columns } i { i := sub(i, 1) } {
                    // Get the index of the join column from the plan
                    let join_column_index := shr(UINT64_PADDING_BITS, calldataload(plan_ptr))
                    plan_ptr := add(plan_ptr, UINT64_SIZE)

                    // We set to 0 any indices that are covered by the join columns
                    mstore(add(other_indices, mul(join_column_index, WORD_SIZE)), 0)

                    // Get the evaluation of the column from the input evaluations
                    let join_column_eval := mload(add(evaluations, mul(join_column_index, WORD_SIZE)))

                    // Both hat and join evaluations should store the join column evaluation
                    mstore(target_hat_evals, join_column_eval)
                    target_hat_evals := add(target_hat_evals, WORD_SIZE)
                    mstore(target_join_evals, join_column_eval)
                    target_join_evals := add(target_join_evals, WORD_SIZE)
                }

                // We need to iterate through each index to determine which were not covered by join columns
                for { let i := 0 } lt(i, num_columns) { i := add(i, 1) } {
                    // We only need to worry about the indices that were not join indices
                    if mload(add(other_indices, mul(i, WORD_SIZE))) {
                        // We store each column evaluation in the hat collection
                        mstore(target_hat_evals, mload(add(evaluations, mul(i, WORD_SIZE))))
                        target_hat_evals := add(target_hat_evals, WORD_SIZE)
                    }
                }
                // The last entry in the hat collection is the rho evaluation
                mstore(target_hat_evals, builder_consume_rho_evaluation(builder_ptr))
                plan_ptr_out := plan_ptr
            }
            function evaluate_u_column_with_monotony_check(builder_ptr, alpha_and_beta) -> u_column_eval_array, u_chi_eval {
                // The length of the u eval collection is 1, until we support joining on multiple columns
                u_column_eval_array := mload(FREE_PTR)
                mstore(FREE_PTR, add(u_column_eval_array, WORDX2_SIZE))
                mstore(u_column_eval_array, 1)

                // We run our monotony check on u eval, before wrapping it in the collection
                u_chi_eval := builder_consume_chi_evaluation(builder_ptr)
                let u_column_eval := builder_consume_first_round_mle(builder_ptr)
                monotonic_verify(
                    builder_ptr,
                    mload(alpha_and_beta),
                    mload(add(alpha_and_beta, WORD_SIZE)),
                    u_column_eval,
                    u_chi_eval,
                    1,
                    1
                )

                // Store the u eval in the collection
                mstore(add(u_column_eval_array, WORD_SIZE), u_column_eval)
            }
            function consume_and_membership_check_left_column_evals(builder_ptr, alpha_and_beta, hat_evals, res_chi_eval, chi_eval) -> res_column_evals {
                // Initially we set the length of res_column_evals to include the rho eval
                // This will allow us to check the left evals against the hat evals without needing to load a second,
                // almost identical collection
                let num_columns := mload(hat_evals)
                res_column_evals := mload(FREE_PTR)
                mstore(res_column_evals, num_columns)
                mstore(FREE_PTR, add(res_column_evals, mul(add(num_columns, 1), WORD_SIZE)))

                let target_ptr := add(res_column_evals, WORD_SIZE)
                for { let i := num_columns } i { i := sub(i, 1) } {
                    let eval := builder_consume_first_round_mle(builder_ptr)
                    mstore(target_ptr, eval)
                    target_ptr := add(target_ptr, WORD_SIZE)
                }
                pop(
                    membership_check_evaluate(
                        builder_ptr,
                        mload(alpha_and_beta),
                        mload(add(alpha_and_beta, WORD_SIZE)),
                        chi_eval,
                        res_chi_eval,
                        hat_evals,
                        res_column_evals
                    )
                )
            }
            function populate_right_evals_for_join(eval, right_column_evals, res_column_evals_out) {
                // We store the output in two collections. One output collection and one to compare with the hat evals
                mstore(right_column_evals, eval)
                mstore(res_column_evals_out, eval)
            }

            function consume_right_evals_for_join(builder_ptr, num_join_columns, hat_evals, res_chi_eval, chi_eval, left_right_and_output_evaluations) -> i_eval, right_column_evals {
                // The length of hat_evals is the length of the collection which will be used in the membership check
                let num_columns := mload(hat_evals)
                right_column_evals := mload(FREE_PTR)
                mstore(right_column_evals, num_columns)
                let res_column_evals := mload(add(left_right_and_output_evaluations, WORDX2_SIZE))
                let res_column_evals_out := add(right_column_evals, mul(add(num_columns, 1), WORD_SIZE))
                mstore(add(left_right_and_output_evaluations, WORDX2_SIZE), res_column_evals_out)

                // Load length of incoming res_column_evals
                let res_column_length := sub(mload(res_column_evals), 1)

                // The length of the outgoing collection should be
                // the incoming length plus the number of right hat evals less the common columns
                mstore(
                    FREE_PTR,
                    add(
                        res_column_evals_out,
                        mul(add(res_column_length, sub(add(num_columns, 1), num_join_columns)), WORD_SIZE)
                    )
                )
                mstore(res_column_evals_out, add(res_column_length, sub(sub(num_columns, 1), num_join_columns)))

                // The first num_join_columns entries in the res_column_evals collection are the common evals.
                // Both res_column_evals_out and right_column_evals need them.
                for { let i := num_join_columns } i { i := sub(i, 1) } {
                    // We increment before reading and writing because we did not increment after handling the lenghts.
                    res_column_evals := add(res_column_evals, WORD_SIZE)
                    res_column_evals_out := add(res_column_evals_out, WORD_SIZE)
                    right_column_evals := add(right_column_evals, WORD_SIZE)
                    populate_right_evals_for_join(mload(res_column_evals), right_column_evals, res_column_evals_out)
                }
                // We copy over the remaining res_column_evals to res_column_evals_out
                for { let i := sub(res_column_length, num_join_columns) } i { i := sub(i, 1) } {
                    res_column_evals := add(res_column_evals, WORD_SIZE)
                    res_column_evals_out := add(res_column_evals_out, WORD_SIZE)
                    mstore(res_column_evals_out, mload(res_column_evals))
                }
                // We consume the non rho, non common right evals and populate right_column_evals and res_column_evals_out
                for { let i := sub(num_columns, num_join_columns) } i { i := sub(i, 1) } {
                    right_column_evals := add(right_column_evals, WORD_SIZE)
                    res_column_evals_out := add(res_column_evals_out, WORD_SIZE)
                    populate_right_evals_for_join(
                        builder_consume_first_round_mle(builder_ptr), right_column_evals, res_column_evals_out
                    )
                }
                // We populate the final entry in right_column_evals with i_eval
                i_eval :=
                    addmod_bn254(
                        mload(right_column_evals), mulmod_bn254(shl(64, 1), mload(add(res_column_evals, WORD_SIZE)))
                    )

                // We drop the pointers back to their starting places
                right_column_evals := sub(right_column_evals, mul(num_columns, WORD_SIZE))
            }

            function consume_and_membership_check_right_column_evals(builder_ptr, alpha_and_beta, num_join_columns, hat_evals, res_chi_eval, chi_eval, left_right_and_output_evaluations) -> i_eval {
                let right_column_evals
                i_eval, right_column_evals :=
                    consume_right_evals_for_join(
                        builder_ptr, num_join_columns, hat_evals, res_chi_eval, chi_eval, left_right_and_output_evaluations
                    )

                // Finally, we can do our membership check
                pop(
                    membership_check_evaluate(
                        builder_ptr,
                        mload(alpha_and_beta),
                        mload(add(alpha_and_beta, WORD_SIZE)),
                        chi_eval,
                        res_chi_eval,
                        hat_evals,
                        right_column_evals
                    )
                )
            }
            function evaluate_consume_and_check_left_column_evals(plan_ptr, builder_ptr, alpha_and_beta, res_chi_eval, left_right_and_output_evaluations, chi_eval) -> plan_ptr_out {
                // We only need the hat evals for a membership check on the output columns
                let hat_evals, join_evals
                plan_ptr_out, hat_evals, join_evals :=
                    evaluate_input_plans(plan_ptr, builder_ptr, mload(left_right_and_output_evaluations))
                mstore(left_right_and_output_evaluations, join_evals)
                let res_column_evals :=
                    consume_and_membership_check_left_column_evals(
                        builder_ptr, alpha_and_beta, hat_evals, res_chi_eval, chi_eval
                    )
                mstore(add(left_right_and_output_evaluations, WORDX2_SIZE), res_column_evals)
            }
            function evaluate_consume_and_check_right_join_evals(plan_ptr, builder_ptr, alpha_and_beta, res_chi_eval, left_right_and_output_evaluations, chi_eval) -> plan_ptr_out {
                let hat_evals, i_eval, join_evals
                plan_ptr, hat_evals, join_evals :=
                    evaluate_input_plans(plan_ptr, builder_ptr, mload(add(left_right_and_output_evaluations, WORD_SIZE)))
                i_eval :=
                    consume_and_membership_check_right_column_evals(
                        builder_ptr,
                        alpha_and_beta,
                        mload(join_evals),
                        hat_evals,
                        res_chi_eval,
                        chi_eval,
                        left_right_and_output_evaluations
                    )
                mstore(add(left_right_and_output_evaluations, WORD_SIZE), join_evals)

                monotonic_verify(
                    builder_ptr,
                    mload(alpha_and_beta),
                    mload(add(alpha_and_beta, WORD_SIZE)),
                    i_eval,
                    res_chi_eval,
                    1,
                    1
                )
                plan_ptr_out := plan_ptr
            }

            function evaluate_remaining_check_on_both_left_and_right_sides(plan_ptr, builder_ptr, alpha_and_beta, left_right_and_output_evaluations, left_chi_eval, right_chi_eval) -> plan_ptr_out, w_eval {
                let u_column_eval_array, u_chi_eval :=
                    evaluate_u_column_with_monotony_check(builder_ptr, alpha_and_beta)
                w_eval :=
                    membership_check_evaluate(
                        builder_ptr,
                        mload(alpha_and_beta),
                        mload(add(alpha_and_beta, WORD_SIZE)),
                        u_chi_eval,
                        left_chi_eval,
                        u_column_eval_array,
                        mload(left_right_and_output_evaluations)
                    )
                // We want to capture w_l_eval and w_r_eval
                w_eval :=
                    mulmod_bn254(
                        w_eval,
                        membership_check_evaluate(
                            builder_ptr,
                            mload(alpha_and_beta),
                            mload(add(alpha_and_beta, WORD_SIZE)),
                            u_chi_eval,
                            right_chi_eval,
                            u_column_eval_array,
                            mload(add(left_right_and_output_evaluations, WORD_SIZE))
                        )
                    )
                plan_ptr_out := plan_ptr
            }

            function evaluate_sort_merge_join_outputs(plan_ptr, builder_ptr, left_right_and_output_evaluations, left_chi_eval, right_chi_eval, output_chi_eval) -> plan_ptr_out {
                // In order to save on local variables, we save alpha and beta in one location in memory
                let alpha_and_beta := mload(FREE_PTR)
                mstore(FREE_PTR, add(alpha_and_beta, WORDX2_SIZE))
                mstore(alpha_and_beta, builder_consume_challenge(builder_ptr))
                mstore(add(alpha_and_beta, WORD_SIZE), builder_consume_challenge(builder_ptr))
                plan_ptr :=
                    evaluate_consume_and_check_left_column_evals(
                        plan_ptr,
                        builder_ptr,
                        alpha_and_beta,
                        output_chi_eval,
                        left_right_and_output_evaluations,
                        left_chi_eval
                    )
                plan_ptr :=
                    evaluate_consume_and_check_right_join_evals(
                        plan_ptr,
                        builder_ptr,
                        alpha_and_beta,
                        output_chi_eval,
                        left_right_and_output_evaluations,
                        right_chi_eval
                    )

                let w_eval
                plan_ptr, w_eval :=
                    evaluate_remaining_check_on_both_left_and_right_sides(
                        plan_ptr,
                        builder_ptr,
                        alpha_and_beta,
                        left_right_and_output_evaluations,
                        left_chi_eval,
                        right_chi_eval
                    )
                // sum w_eval - output_chi_eval = 0
                builder_produce_zerosum_constraint(builder_ptr, submod_bn254(w_eval, output_chi_eval), 2)
                plan_ptr_out := plan_ptr
            }

            function skip_sort_merge_join_aliases(plan_ptr) -> plan_ptr_out {
                let num_aliases := shr(UINT64_PADDING_BITS, calldataload(plan_ptr))
                plan_ptr := add(plan_ptr, UINT64_SIZE)
                for {} num_aliases { num_aliases := sub(num_aliases, 1) } {
                    let entry
                    plan_ptr, entry := read_binary(plan_ptr)
                }
                plan_ptr_out := plan_ptr
            }

            function sort_merge_join_evaluate(plan_ptr, builder_ptr) -> plan_ptr_out, evaluations_ptr, output_length, output_chi_eval {
                // In order to save on local variables, we save the left, right, and output evaluations
                // in one location in memory
                let left_right_and_output_evaluations := mload(FREE_PTR)
                mstore(FREE_PTR, add(left_right_and_output_evaluations, WORDX3_SIZE))

                let left_chi_eval, right_chi_eval
                {
                    let left_evaluations, left_output_length
                    plan_ptr, left_evaluations, left_output_length, left_chi_eval :=
                        proof_plan_evaluate(plan_ptr, builder_ptr)
                    mstore(left_right_and_output_evaluations, left_evaluations)
                }
                {
                    let right_evaluations, right_output_length
                    plan_ptr, right_evaluations, right_output_length, right_chi_eval :=
                        proof_plan_evaluate(plan_ptr, builder_ptr)
                    mstore(add(left_right_and_output_evaluations, WORD_SIZE), right_evaluations)
                }
                output_length, output_chi_eval := builder_consume_chi_evaluation_with_length(builder_ptr)
                plan_ptr :=
                    evaluate_sort_merge_join_outputs(
                        plan_ptr,
                        builder_ptr,
                        left_right_and_output_evaluations,
                        left_chi_eval,
                        right_chi_eval,
                        output_chi_eval
                    )
                evaluations_ptr := mload(add(left_right_and_output_evaluations, WORDX2_SIZE))

                plan_ptr_out := skip_sort_merge_join_aliases(plan_ptr)
            }

            let __planOutOffset
            __planOutOffset, __evaluations, __outputLength, __outputChiEvaluation :=
                sort_merge_join_evaluate(__plan.offset, __builder)
            __planOut.offset := __planOutOffset
            // slither-disable-next-line write-after-write
            __planOut.length := sub(__plan.length, sub(__planOutOffset, __plan.offset))
        }
        __evaluationsPtr = __evaluations;
        __builderOut = __builder;
    }
}
