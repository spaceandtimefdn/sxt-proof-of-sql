// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";
import "./../../src/base/Constants.sol";
import {Errors} from "./../../src/base/Errors.sol";
import {Verifier} from "./../../src/verifier/Verifier.pre.sol";

contract VerifierTest is Test {
    function verify(
        bytes calldata result,
        bytes calldata plan,
        bytes calldata proof,
        uint256[] memory tableLengths,
        uint256[] memory commitments
    ) public view {
        Verifier.__verify({
            __result: result,
            __plan: plan,
            __proof: proof,
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testSimpleFull() public view {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 1;
        uint256[] memory commitments = new uint256[](4);
        commitments[0] = 0;
        commitments[1] = 0;
        commitments[2] = 0;
        commitments[3] = 0;
        Verifier.__verify({
            __result: hex"000000000000000100000000000000016100000000050000000000000000",
            __plan: hex"0000000000000001000000000000000f6e616d6573706163652e7461626c65000000000000000200000000000000000000000000000001610000000500000000000000000000000000000001620000000500000000000000010000000000000001610000000000000000000000000000000a000000000000000000000000010000000000000000000000000000000000000001000000000000000000000000",
            __proof: hexb6148b8d88340e36bf1abf6de9fa99b2a72ca2073f2f6068e7aaaa5743a8d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103526294b472dcc2a991f9d166ab7c38d15bd10f09056f55ca628d67286b93f003526294b472dcc2a991f9d166ab7c38d15bd10f09056f55ca628d67286b93f003526294b472dcc2a991f9d166ab7c38d15bd10f09056f55ca628d67286b93f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testCommitmentArrayOddLength() public {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;

        // Create an array with an odd length (5 elements)
        uint256[] memory commitments = new uint256[](5);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        commitments[4] = 12345678901234567890123456789012345678901234567890123456789012345678901234567; // Add extra element

        // Expect the error for odd-length commitment array
        vm.expectRevert(Errors.CommitmentArrayOddLength.selector);

        Verifier.__verify({
            __result: hex"00",
            __plan: hex"00",
            __proof: hex"00",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }
}
