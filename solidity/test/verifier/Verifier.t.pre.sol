// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";
import "./../../src/base/Constants.sol";
import {Errors} from "./../../src/base/Errors.sol";
import {Verifier} from "./../../src/verifier/Verifier.pre.sol";

contract VerifierTest is Test {
    function verify(
        bytes calldata result,
        bytes calldata plan,
        uint256[] calldata placeholderParameters,
        bytes calldata proof,
        uint256[] memory tableLengths,
        uint256[] memory commitments
    ) public view {
        Verifier.__verify({
            __result: result,
            __plan: plan,
            __placeholderParameters: placeholderParameters,
            __proof: proof,
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testSimpleFull() public view {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;
        uint256[] memory commitments = new uint256[](4);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        uint256[] memory placeholderParameters = new uint256[](0);
        Verifier.__verify({
            __result: hex"00000000000000010000000000000001620000000005000000000000000200000000000000000000000000000003",
            __plan: hex"0000000000000001000000000000000f6e616d6573706163652e7461626c650000000000000002000000000000000000000000000000016200000005000000000000000000000000000000016100000005000000000000000100000000000000016200000000000000000000000000000002000000000000000000000001000000010000000500000000000000050000000000000001000000000000000000000000",
            __placeholderParameters: placeholderParameters,
            __proof: hex"000000000000000600000000000000020000000000000001000000000000000200000000000000000000000000000001236cd1dd5ae57dd08a8b09bd6bd3397fe4b58aa1638c554b8054dcb2d4d0297e12a7e3d2a6d11cf4e66979ea5458d24f66ba7866c43b933fd2135c2a761990140000000000000006000000000000000427a607595971e4f8531109d6bcf114838faac36652aa81d86d51f087cd08799c1095fa761ceaceb796068f4b8174492ede1e88c2f4aafee493331c267284be330078dfd5227feba93faa9a0c9c38432d6c169909d2546f8cef0b7a2108d44db71d518c19207b5ee92cca5cfe09ec5aca67af638b4205a7b650ccb9b9ecd6dd812bbc76361bfaf1e75d70512e9911c71b134404cecbce4053e29ec7c0067717941b11c59c7ba544571e02ba430f9256a63b51e7c8927ffd0d9763fc59bcdcad9521defadf9d440192285b6a0f4e7dc657225821e39bca44e618f7331859e431a62921dd8f70e56f4b52a667f4a851eef537584fb196d14cde47a607f2f6015f3c0000000000000000000000000000000c2213a7e872fb7282f0cc0dd51849bf2ff7ec54ed9808aa4e0e6e1cd28fcb92c3305cbc3d49081a3f8903d7051f8f2339bde80f4e5bb8a734ad9dd2a3f4546b3c0e5838c0065fb390f6d0a692cb29ce509a936c54ffb18f9fcbb7fbb15be0020300000000000000000000000000000000000000000000000000000000000000002a78454c7495af3578b6a76a0c0e466fe8344e4addbb42cd26884def58da7868054654ff5cf64ba57019424f4605b31cd9c1054838af3c76a328e73bd4926e981528b9ebc970b8cd438498c39ed0ea48f1371e2086d8fe05ab74e64eb3734f2400b10973adcc61aae75ae86e611a3841429d1caca4a494f28a2e6cbe0e52d3c5149288a13b0c52aabce6d86647687cfcbfedc51411987310e3720ce3bf825f7e1d994a16be57afaa6c359604c21e668d04c15d22c625090166b8fafdffcedf0b0d2c5ff51df9770edbaa1adea382093bf47080d970525d312fd84a079ed79e27032a07f15896ed58747737eead936dd726da54c86b2a9b7ba0018c76e81245f40000000000000001053c4f025664d4b8acee1dc9031ec5a2f317b8925dc9644c9b4f7374f38394bf000000000000000210ad8d2429808efbdd736c85a633f06bfcecf67c1176f663bcf539da580ab26a2bca750dcec81878a22a4491d297e2e25f3075e51142ab423cfd043f26011406000000000000000429bf1b4ab45c01e9ce34d45f5e5ecd3981dfd601bca842cff63195d2f083473d1dd1a2b1144573e47617af8880dc21d3fd2a59d13667fbafa480214a9837597d09ee8ebf4f8cdeaad712f6590860ed51fd2c016ae22e3a1a77f4dd829b6310ab0a9a134ee900ecd55e2a2f5f2a4b4cccce6d2eb5cc6e48b83842c191e62b385600000000000000022b03c9884579cc14dc61d1170ac542d6e5644788116a385d6270dd98a5e44bdc0469d7129e26beffaa254d328483128749815e206142e2e7e070ff80e09e12b11d451694e6f5f1f77f24abc1f7e9dbd3a45e2290579d13f99cc69759488f1b070a0c77d54766dbdaa76abb4c09eb7d63a9164029b45004256a15d5bc916578f800000000000000030e7f8be7196f81ad2b53d1c32cb0195aa5ebc0c9057d96610f3b1fab9ffe221e0071c2851b18ed85147a3180c66b4256a23cbab14eaf9c664bc671e3d77698690d0f0402e578dd35dece44d18c1c7f621f711b69d54fbaab626d056fb8b6dee6229abf501e772f97ed81883e887a59ea2e3b0aec96ef8c564487636c9d81ed7d1528294b9c64478b3639058d016af0124eff2f3ff43338d8ff09feebf10bbc65263f7c76fdc23a81247aaf82fb2950e338366c74cb8587edf356e81a879bcbb027569a4c3d2fd2e6911906360d631f782e85e2d3ab2d9cbea3b04ee4665f770b19addf5b992f367bf28052200c5f5a8dfe51c4aad20f88650582076a3df14c8b11a23476574f9897c8443e08d74dabcf4e6cec2570413a75868fe94ebcd515321aefdb3c230781218939b8c23c119882a6a33c436107b91251ef56f49931bf810d7ff68080646fd6318fe606515274605f04d8aa388a691d81b0fbfe5ffb631d0f18380aae265a246a709d749ef616bbc5a0d830db9b7fbe3edbcd595c05821b203a555e3f1437b61df68adecdbe8faf5a2016483e546864f7945b1310ffe8c20624858fd41b8a021d1bd3d587ad5f9c7736d671e673b4d337c7a4006131ab0323be95569c016aa5a58ea78691d7328cab9e5c6b01e657e3e1ebe1c51eb7bb39",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testCommitmentArrayOddLength() public {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;

        // Create an array with an odd length (5 elements)
        uint256[] memory commitments = new uint256[](5);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        commitments[4] = 12345678901234567890123456789012345678901234567890123456789012345678901234567; // Add extra element

        uint256[] memory placeholderParameters = new uint256[](0);

        // Expect the error for odd-length commitment array
        vm.expectRevert(Errors.CommitmentArrayOddLength.selector);

        Verifier.__verify({
            __result: hex"00",
            __plan: hex"00",
            __placeholderParameters: placeholderParameters,
            __proof: hex"00",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }
}
