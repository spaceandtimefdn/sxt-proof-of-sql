// SPDX-License-Identifier: UNLICENSED
// This is licensed under the Cryptographic Open Software License 1.0
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";
import "./../../src/base/Constants.sol";
import {Errors} from "./../../src/base/Errors.sol";
import {Verifier} from "./../../src/verifier/Verifier.pre.sol";

contract VerifierTest is Test {
    function verify(
        bytes calldata result,
        bytes calldata plan,
        bytes calldata proof,
        uint256[] memory tableLengths,
        uint256[] memory commitments
    ) public view {
        Verifier.__verify({
            __result: result,
            __plan: plan,
            __proof: proof,
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testSimpleFull() public view {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;
        uint256[] memory commitments = new uint256[](4);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        Verifier.__verify({
            __result: hex"00000000000000010000000000000001620000000005000000000000000200000000000000000000000000000003",
            __plan: hex"0000000000000001000000000000000f6e616d6573706163652e7461626c650000000000000002000000000000000000000000000000016200000005000000000000000000000000000000016100000005000000000000000100000000000000016200000000000000000000000000000002000000000000000000000001000000010000000500000000000000050000000000000001000000000000000000000000",
            __proof: hex"00000000000000060000000000000002000000000000000100000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000527a607595971e4f8531109d6bcf114838faac36652aa81d86d51f087cd08799c1095fa761ceaceb796068f4b8174492ede1e88c2f4aafee493331c267284be330078dfd5227feba93faa9a0c9c38432d6c169909d2546f8cef0b7a2108d44db71d518c19207b5ee92cca5cfe09ec5aca67af638b4205a7b650ccb9b9ecd6dd81236cd1dd5ae57dd08a8b09bd6bd3397fe4b58aa1638c554b8054dcb2d4d0297e12a7e3d2a6d11cf4e66979ea5458d24f66ba7866c43b933fd2135c2a76199014289e34976879e8f22ff834cb2508e621f20a50de70f1d338008a2058b89e79120d569c0b5ff25efa8a8f7bb8420bb32c67fb882c293daf294b767f3a3a23a3fd09bac061e7f4d8e8d668650312cea54a5103b08fbc9023e592ba4ead7f27887507a3a75a6703f22cd9b038dd43e7e4e57db5e4ca08e13032d34edbefd7ead9f90000000000000000000000000000000c26e696d9b19bd94adcb9dcc40d95a378570c3d458d0f61a838bdcb10d47021282811a16c3f37857b71b44af4d800a25f6edb1694b4dada75c8e36c010e84583d11d0649fd18fe18d223263b41d6c6ae28a807cb6b188a5048622b415fd0b869d00000000000000000000000000000000000000000000000000000000000000002cb30454799a8fad268f7a2065f0eb8a32452a7189e504e9fde0b6448c1e3a271b3e5e1a9bab3c0d15eb4599904fc8345218fb78aced2d8c463ffb80bf6a121022e34bbd19c1ca15421ace8ccf66aeaf0537e1743b7665e599b7f52a8b605f9d2c58bdd8d275ad338f51b1bcc0de7920d501abf7cd3ff148d16f445fc3b6450a081ffb63acbbb74b973c4f1f9cd9792c410c4b9f6c8da3bf541c2832af9bcfe41f05cdcead9b060cee70e34dde80d41c043ec97b04abb5b0a7368052cbd9e8142ee08a0e5a93152fa56b65be8c12e2c06451a9922cb41e23747c9ccb71037e682f913cc420d75d0a0a59c3826b6282a4b60c503188d790df3b430bb7ac1ff441000000000000000000000000000000020b312043454abce40d9f41a4297ccc99d9c4afce7dde449ecd6dadf02dd3412926f08080a72c621237db7a39b5c3016c1d17f5dce1f58c03ac228a73a1b94d66000000000000000505b3b5935adb7026b3fa1a46fc1e7c6760343bfecc0e2272dac7d14f9ec5281021fcac921bbda70f9344ed7686b285b6efbea2e152bf725e441ddf7ea544d92808c942acce37089982210f12dfa6c12ca4e6e414f6f0e73cf462339e6457b6a40e8498acec77e6e6ae09ce6cd756b869b0ab6fdbf0f50d844c71fd899e5f76172418796e874ca271b314e019eb24b950cf186fee00379ab94925041987ebe1da00000000000000023008e90266f8f307478529b5d5510d7973d87d83353619984d29c4e5e4f64184255a16adb02ab1919b985972c6e187888b5a183b400d278187595c15794c59541620f20bbb4f5d158ca2c9dd0cb5dba45192c60215366af2b10a7c94772806451efc786a2b4e84cfa94883cf8100e002a0a4fd08dda45c3e7bb8b7ee6aaef97300000000000000031899018d21fe571109bf770db9299307e44e6f65a2a5c09101bfc3d884b4e8de1f70a57fcfb8b2c803366aedbc1af7a4338a0752ac53356364727e53be10f15c2fb1869ccec7cd0957d63a9db95333a5393abd21bb5b888bf6afa4ce67ad947316c72a8f3d3fe40194b9fbc011c5f9ef75922c523f5bf8ab89b2c4b571cdd88b2515f648b428eecff2efdac30907acb27f307e4896b633f55f215ba2b8f7e1630aa8e3570596c8267d67ac16c9314fdce653ed3277c063d55c66c2a76efa417920c4567ff19c27e7c77ab384f383a0d5164e1fb611342b930849323f3235200f1a6b392769b42df79025a968ea7ffb97dae7fed55814b3ead17cbe26d2c958e4146e45f5e7494ff21ad9dfb6888707a7ee34074bf60794f665c9bafb3eb72e1216ea5856291fc92b0e7e6db229764782b93a2bfd66bde4a1e082f259dfe37b262e2d1f9f1be2bdd4b1846e50c6c8caa434e4d602010a7fb0000eab2ee972e9ba0b948a9fab16ccf21146054b776c30bc2a31a7513121dd6409cee784592b9a730432abaec787863854c8d62bd227026bcee5a6c4b08ac9f28b034e922a6c20722e1b9a63c864f2496052ca183df0bcaf2452f5c735347a5fdfc28ca2a82d54411938f60c4cf3982a2e3b1b28de0d5a0c0aa29fe12505e49ccf777564fec79a01",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }

    function testCommitmentArrayOddLength() public {
        uint256[] memory tableLengths = new uint256[](1);
        tableLengths[0] = 6;

        // Create an array with an odd length (5 elements)
        uint256[] memory commitments = new uint256[](5);
        commitments[0] = 10330259091102222580680469239495014349163118537637164875615751892418606990939;
        commitments[1] = 11920476268597659993223945595713248355766624440856258163660132291159882440306;
        commitments[2] = 11994260765248910561540716452031502208136256599213361935879450273410509855704;
        commitments[3] = 13760418268827664034425846360177624835399216842325030254024970295997593510876;
        commitments[4] = 12345678901234567890123456789012345678901234567890123456789012345678901234567; // Add extra element

        // Expect the error for odd-length commitment array
        vm.expectRevert(Errors.CommitmentArrayOddLength.selector);

        Verifier.__verify({
            __result: hex"00",
            __plan: hex"00",
            __proof: hex"00",
            __tableLengths: tableLengths,
            __commitments: commitments
        });
    }
}
